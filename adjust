#!/usr/bin/env python3

import sys
import os
import signal

import subprocess

from adjust import Adjust, AdjustError

import json
# 'compact' format json encode (no spaces)
json_enc = json.JSONEncoder(separators=(",",":")).encode

import adjust
import util
from util import run_and_track

MY_VERSION = "aggregator 1.0"
DRIVERS_DIR = "adjust.d"

def run(path, *args, data = None):

    if data:
        data = json_enc(data).encode("UTF-8")
    r = subprocess.check_output([path]+list(args), input = data)

    return json.loads(r.decode("UTF-8"))


def locate_drivers():
    drivers = []
    for e in os.listdir(DRIVERS_DIR):
        p = os.path.join(DRIVERS_DIR,e)
        if not (os.path.isfile(p) and os.access(p, os.X_OK)):
            continue
        info = run(p, "--info") # may raise an exception
        drivers.append( (p, info) )
        drivers.sort() # by the relative path, which by construction is simply 'by file name' here

    return drivers


def _version():
    ver = MY_VERSION
    dvers = ", ".join( [info["version"] for d,info in drivers] )
    return "{} ({})".format(ver, dvers)


def info():
    ver = _version()
    has_cancel = all( ( info.get("has_cancel", False)  for d,info in drivers ) )

    print (json_enc( { "version":ver, "has_cancel":has_cancel } ))


g_state = {} # saved --query output from each driver

def merge_settings(dest, src):
    """merge src['settings'] into dest['settings'], raise exception if the
    same setting is defined in both"""

    settings = dest.setdefault("settings",{})
    for sn,sv in src.get("settings",{}).items():
        if sn in settings:
            raise ValueError(sn)
        settings[sn] = sv

    return

def _query(app_id='app'):
    comps = {}

    # first, read and save
    for d,info in drivers:
        #
        q = run(d, '--query', app_id)
        g_state[d] = q

    # merge after all data is collected
    descriptor = {"application" : { "components" : {}}, "monitoring": {}}
    comps = descriptor['application']['components']
    monitoring = descriptor['monitoring']

    for d,info in drivers:
        # TODO: s[application] (global app settings not supported for now)
        monitoring.update(g_state[d].get("monitoring",{}))
        for cn, cd in g_state[d]["application"]["components"].items():
            c = comps.setdefault(cn, {})
            try:
                merge_settings(c, cd) # merge *into* c; raises error on conflicts
            except ValueError as x:
                # re-raise with context info
                # NOTE we don't keep track where the first one came from, just report the current driver as the culprit
                raise ValueError("{}: duplicate setting for component {}: {}".format(os.path.basename(d), cn, str(x)))

    return descriptor


def _adjust(app_id, new_settings):
    q = _query() # this should populate g_state
    comps = q["application"]["components"]
    comp_settings = new_settings.get("application",{}).get("components",{})


    # prepare data for all drivers first (skipping those with nothing to do)
    run_lst = []
    for d,info in drivers:
        # extract settings for this driver only
        dsettings = {}
        dstate = g_state[d]
        for cn,cs in dstate["application"]["components"].items(): # FIXME 'components' optional?
            # print("C:", cn)
            for sn, sv in cs.get("settings",{}).items():
                # print("    S:", sn)
                new_setting = comp_settings.get(cn,{}).get("settings",{}).get(sn,None)
                if new_setting is not None:
                    dsettings.setdefault(cn,{}).setdefault("settings",{})[sn] = new_setting

        if dsettings: # skip if there's nothing for this driver
            driver_data = {"application": {"components": dsettings}}
            if "control" in new_settings:
                driver_data["control"] = new_settings["control"]
            run_lst.append((d, driver_data))

    # progress ratios - assume all driver have equal weight
    p = 1.0/float(len(run_lst))
    p_weight = { d:p for d,_ in run_lst }
    p_progress = { d:0.0 for d,_ in run_lst }
    p_status = {}

    for d, data in run_lst:
        def cbk(args):
            try:
                p = args["progress"]
            except KeyError:
                return # nothing to do
            p = float(p)/100.0
            p_progress[d] = p
            total = int ( sum( (v * p_weight[k] for k,v in p_progress.items()) ) * 100.0 )
            if total>100: total = 100
            print ( json_enc( {"progress": total} ), flush = True )
        #
        s = run_and_track(d, app_id, progress_cb = cbk, data = data )
        p_status[d] = s
        # assume completed (NOTE: regardless of status)
        cbk( {"progress":100} )

    # aggregate status
    ok = all( (x["status"] == "ok" for x in p_status.values()) )
    if ok:
        return

    # FIXME: change base class to support a return value! (so we can return a structured err instead of raise Exc())
    # failure: cook a message from all failed drivers
    msg = []
    for d,s in p_status.items():
        if s["status"] == "ok": continue
        msg.append("{}: {}: {}".format(os.path.basename(d), s["status"], s.get("message","")))
    raise AdjustError( "\n".join(msg), status=s["status"], reason=s["reason"] )

class A(Adjust):

    def query(self):
        return _query()

    def adjust(self, data):
        _adjust(self.app_id, data)
        return # return nothing

    def info(self):
        ver = self.version # _version() - already set on obj create
        has_cancel = all( ( info.get("has_cancel", False)  for d,info in drivers ) )
        return { "version":ver, "has_cancel":has_cancel }

def sigusr1(num, frame):
    util.run_and_track_cancel()
    os.exit(1)

def terminate(num, frame):
    util.run_and_track_terminate()
    os.exit(1)

if __name__ == "__main__":
    os.environ["PYTHONPATH"] = os.getcwd() # TODO: append to the path, in case it is set
    drivers = locate_drivers()
    # print(drivers)

    oldterm = signal.signal(signal.SIGTERM, terminate)
    oldint = signal.signal(signal.SIGINT, terminate)

    if all( ( info.get("has_cancel", False)  for d,info in drivers ) ):
        signal.signal(signal.SIGUSR1, sigusr1)

    try:
        i = A(_version(), "adjust aggregator, runs all drivers in ./adjust.d/", False)
    except Exception as x:
        # TODO
        raise

    i.run()
#    print (g_state, file=sys.stderr)
